// Generated by CoffeeScript 1.6.1
(function() {

  describe('Truman', function() {
    beforeEach(function() {
      Truman.delay = 0;
      return Truman.dropTables();
    });
    beforeEach(function() {
      return this.addMatchers({
        toHaveBeenCalledWithJson: function(data) {
          var actualData;
          actualData = JSON.parse(this.actual.mostRecentCall.args[0]);
          expect(actualData).toEqual(data);
          return true;
        }
      });
    });
    it('supports setting request headers', function() {
      var activity;
      activity = function() {
        var xhr;
        xhr = new XMLHttpRequest();
        xhr.open('GET', '/examples');
        return xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
      };
      return expect(activity).not.toThrow();
    });
    describe('intercepts handlers', function() {
      var createGetRequest, handler, runAsyncTest;
      handler = null;
      beforeEach(function() {
        return handler = jasmine.createSpy();
      });
      runAsyncTest = function(makeAjaxRequest) {
        var expectation;
        runs(makeAjaxRequest);
        expectation = function() {
          return handler.callCount > 0;
        };
        waitsFor(expectation, 'handler never called', 100);
        return runs(function() {
          return expect(handler).toHaveBeenCalledWith('[]');
        });
      };
      createGetRequest = function() {
        var xhr;
        xhr = new XMLHttpRequest();
        xhr.open('GET', '/examples');
        return xhr;
      };
      it('added with the onload method', function() {
        return runAsyncTest(function() {
          var xhr;
          xhr = createGetRequest();
          xhr.onload = function() {
            if (xhr.readyState === 4) {
              return handler(xhr.responseText);
            }
          };
          return xhr.send();
        });
      });
      it('added with the onreadystatechange method', function() {
        return runAsyncTest(function() {
          var xhr;
          xhr = createGetRequest();
          xhr.onreadystatechange = function() {
            if (xhr.readyState === 4) {
              return handler(xhr.responseText);
            }
          };
          return xhr.send();
        });
      });
      it('added with the onprogress method', function() {
        return runAsyncTest(function() {
          var xhr;
          xhr = createGetRequest();
          xhr.onprogress = function() {
            if (xhr.readyState === 4) {
              return handler(xhr.responseText);
            }
          };
          return xhr.send();
        });
      });
      return it('added with addEventListener("load")', function() {
        return runAsyncTest(function() {
          var xhr;
          xhr = createGetRequest();
          xhr.addEventListener('load', function() {
            return handler(xhr.responseText);
          });
          return xhr.send();
        });
      });
    });
    describe('creates fake records when sending POST requests to "create"-like routes', function() {
      var handler;
      handler = null;
      beforeEach(function() {
        return handler = jasmine.createSpy();
      });
      it('using form-encoded data', function() {
        runs(function() {
          var xhr;
          xhr = new XMLHttpRequest();
          xhr.open('POST', '/examples');
          xhr.addEventListener('load', function() {
            return handler(xhr.responseText);
          });
          return xhr.send('title=Example%20Title&content=Example%20Content');
        });
        waitsFor(function() {
          return handler.callCount > 0;
        });
        return runs(function() {
          return expect(handler).toHaveBeenCalledWithJson({
            id: 1,
            title: 'Example Title',
            content: 'Example Content'
          });
        });
      });
      it('using JSON-encoded data', function() {
        runs(function() {
          var xhr;
          xhr = new XMLHttpRequest();
          xhr.open('POST', 'examples');
          xhr.addEventListener('load', function() {
            return handler(xhr.responseText);
          });
          xhr.setRequestHeader('Content-type', 'application/json');
          return xhr.send('{ "title": "Example Title", "content": "Example Content" }');
        });
        waitsFor(function() {
          return handler.callCount > 0;
        });
        return runs(function() {
          return expect(handler).toHaveBeenCalledWithJson({
            id: 1,
            title: 'Example Title',
            content: 'Example Content'
          });
        });
      });
      xit('using FormData', function() {
        runs(function() {
          var formData, xhr;
          xhr = new XMLHttpRequest();
          xhr.open('POST', '/examples');
          xhr.addEventListener('load', function() {
            return handler(xhr.responseText);
          });
          formData = new FormData();
          formData.append('title', 'Example Title');
          formData.append('content', 'Example Content');
          return xhr.send(formData);
        });
        waitsFor(function() {
          return handler.callCount > 0;
        });
        return runs(function() {
          return expect(handler).toHaveBeenCalledWithJson({
            id: 1,
            title: 'Example Title',
            content: 'Example Content'
          });
        });
      });
      it('handles multiple values for a given field', function() {
        runs(function() {
          var xhr;
          xhr = new XMLHttpRequest();
          xhr.open('POST', '/examples');
          xhr.addEventListener('load', function() {
            return handler(xhr.responseText);
          });
          return xhr.send('values=foo&values=bar');
        });
        waitsFor(function() {
          return handler.callCount > 0;
        });
        return runs(function() {
          return expect(handler).toHaveBeenCalledWithJson({
            id: 1,
            values: ['foo', 'bar']
          });
        });
      });
      return it('adds the approprate foreign key for nested routes', function() {
        runs(function() {
          var xhr;
          xhr = new XMLHttpRequest();
          xhr.open('POST', '/categories/1/examples');
          xhr.addEventListener('load', function() {
            return handler(xhr.responseText);
          });
          return xhr.send('title=Nested%20route%20example');
        });
        waitsFor(function() {
          return handler.callCount > 0;
        });
        return runs(function() {
          return expect(handler).toHaveBeenCalledWithJson({
            id: 1,
            category_id: 1,
            title: 'Nested route example'
          });
        });
      });
    });
    describe('fetching records from subresource routes', function() {
      var callback;
      callback = null;
      beforeEach(function() {
        Truman.Table('categories').insertMany([
          {
            name: 'Category 1'
          }, {
            name: 'Category 2'
          }
        ]);
        Truman.Table('examples').insertMany([
          {
            category_id: 1,
            title: 'Example 1'
          }, {
            category_id: 2,
            title: 'Example 2'
          }, {
            category_id: 2,
            title: 'Example 3'
          }
        ]);
        return callback = jasmine.createSpy();
      });
      return it('fetches only the records with the matching foreign key', function() {
        runs(function() {
          var xhr;
          xhr = new XMLHttpRequest();
          xhr.open('GET', '/categories/2/examples');
          xhr.onprogress = function() {
            if (xhr.readyState === 4) {
              return callback(xhr.responseText);
            }
          };
          return xhr.send();
        });
        waitsFor(function() {
          return callback.callCount > 0;
        });
        return runs(function() {
          return expect(callback).toHaveBeenCalledWithJson([
            {
              id: 2,
              category_id: 2,
              title: 'Example 2'
            }, {
              id: 3,
              category_id: 2,
              title: 'Example 3'
            }
          ]);
        });
      });
    });
    return describe('fetching records with associations', function() {
      var callback;
      callback = null;
      beforeEach(function() {
        Truman.Table('directors').insertMany([
          {
            name: 'Chris Nolan',
            age: 43
          }, {
            name: 'Darren Aronofsky',
            age: 44
          }
        ]);
        Truman.Table('movies').insertMany([
          {
            director_id: 1,
            title: 'Memento',
            year: 2000
          }, {
            director_id: 2,
            title: 'Reqiuem for a Dream',
            year: 2000
          }
        ]);
        return callback = jasmine.createSpy();
      });
      return it('joins the records with their associations one level deep', function() {
        runs(function() {
          var xhr;
          xhr = new XMLHttpRequest();
          xhr.open('GET', '/movies');
          xhr.onprogress = function() {
            if (xhr.readyState === 4) {
              return callback(xhr.responseText);
            }
          };
          return xhr.send();
        });
        waitsFor(function() {
          return callback.callCount > 0;
        });
        return runs(function() {
          return expect(callback).toHaveBeenCalledWithJson([
            {
              id: 1,
              title: 'Memento',
              year: 2000,
              director: {
                id: 1,
                name: 'Chris Nolan',
                age: 43
              }
            }, {
              id: 2,
              title: 'Reqiuem for a Dream',
              year: 2000,
              director: {
                id: 2,
                name: 'Darren Aronofsky',
                age: 44
              }
            }
          ]);
        });
      });
    });
  });

}).call(this);
